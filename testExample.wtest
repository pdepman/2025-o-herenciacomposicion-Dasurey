import example.*

describe "group of tests for guerrero" {
  const fedeWarrior = new Guerrero(aniosEnServicio=2, vida=500, defensa = 0, equipamiento=[
    new Espada(desgaste = 0),
    new Espada(desgaste = 5),
    armadura,
    new Baston(cantidadUsos = 0)
  ])
  const guerreroDesarmado = new Guerrero(equipamiento=[], defensa=200, aniosEnServicio=10)
  const matiMago = new Mago(vida = 500, defensa = 0, companiero = fedeWarrior)
  test "La fuerza de ataque es el danio del equipamiento más el bonus por anios de servicio" {
    assert.equals(2*100+100+95+0+10, fedeWarrior.fuerzaAtaque())
  }

  test "Sin equipamiento la fuerza de ataque es sólo el plus por servicio" {
    assert.equals(100*10, guerreroDesarmado.fuerzaAtaque())
  }

  // Si siguiéramos la teoría de Unit testing, deberíamos probar los danios de cada equipamiento

  test "cuando un guerrero ataca, le resta vida al contrincante (fuerza menos defensa)"{
    fedeWarrior.atacar(guerreroDesarmado)
    // 405 fuerza de fedeWarrior
    assert.equals(1000-(405-200), guerreroDesarmado.vida())
  }
  test "cuando un mago ataca, reenvia el ataque a su companiero"{
    matiMago.atacar(guerreroDesarmado)
    // 405 fuerza del companiero (fedeWarrior)
    assert.equals(1000-(405-200), guerreroDesarmado.vida())
  }

  test "Si baston comun llega a 3 usos se transforma en clava" {
    const baston = new Baston(cantidadUsos = 2)
    baston.registrarUso()
    assert.equals(14, baston.danio())
  }

    test "Si clava llega a 8 usos se transforma en maza" {
    const clava = new Baston(cantidadUsos = 7)
    clava.registrarUso()
    assert.equals(14, clava.danio())
  }
}